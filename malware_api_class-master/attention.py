import os
import gensim
import keras
import sklearn
import numpy as np
from keras import Sequential
from keras.layers import Masking, LSTM, Dense, Bidirectional, Embedding, Dropout, Flatten, BatchNormalization, GRU
from keras.preprocessing.sequence import pad_sequences
from keras.callbacks import ReduceLROnPlateau, EarlyStopping
from keras import regularizers
from keras import backend as K
from keras.layers import Layer
from keras import initializers, regularizers, constraints

files = {"Spyware", "Downloader", "Trojan", "Worms", "Adware", "Dropper", "Virus", "Backdoor"}
classes = {"Spyware": 0, "Downloader": 1, "Trojan": 2, "Worms": 3, "Adware": 4, "Dropper": 5, "Virus": 6, "Backdoor": 7}

batch_size = 128
num_step = 150
class_num = 8
sequence_length = 5000
embedding = 50
dev_sample_percentage = 0.2


def dot_product(x, kernel):
    """
    Wrapper for dot product operation, in order to be compatible with both
    Theano and Tensorflow
    Args:
        x (): input
        kernel (): weights
    Returns:
    """
    if K.backend() == 'tensorflow':
        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)
    else:
        return K.dot(x, kernel)


class AttentionWithContext(Layer):
    """
    Attention operation, with a context/query vector, for temporal data.
    Supports Masking.
    Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf]
    "Hierarchical Attention Networks for Document Classification"
    by using a context vector to assist the attention
    # Input shape
        3D tensor with shape: `(samples, steps, features)`.
    # Output shape
        2D tensor with shape: `(samples, features)`.
    How to use:
    Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True.
    The dimensions are inferred based on the output shape of the RNN.
    Note: The layer has been tested with Keras 2.0.6
    Example:
        model.add(LSTM(64, return_sequences=True))
        model.add(AttentionWithContext())
        # next add a Dense layer (for classification/regression) or whatever...
    """

    def __init__(self,
                 W_regularizer=None, u_regularizer=None, b_regularizer=None,
                 W_constraint=None, u_constraint=None, b_constraint=None,
                 bias=True, **kwargs):

        self.supports_masking = True
        self.init = initializers.get('glorot_uniform')

        self.W_regularizer = regularizers.get(W_regularizer)
        self.u_regularizer = regularizers.get(u_regularizer)
        self.b_regularizer = regularizers.get(b_regularizer)

        self.W_constraint = constraints.get(W_constraint)
        self.u_constraint = constraints.get(u_constraint)
        self.b_constraint = constraints.get(b_constraint)

        self.bias = bias
        super(AttentionWithContext, self).__init__(**kwargs)

    def build(self, input_shape):
        assert len(input_shape) == 3

        self.W = self.add_weight((input_shape[-1], input_shape[-1],),
                                 initializer=self.init,
                                 regularizer=self.W_regularizer,
                                 constraint=self.W_constraint)
        if self.bias:
            self.b = self.add_weight((input_shape[-1],),
                                     initializer='zero',
                                     regularizer=self.b_regularizer,
                                     constraint=self.b_constraint)

        self.u = self.add_weight((input_shape[-1],),
                                 initializer=self.init,
                                 regularizer=self.u_regularizer,
                                 constraint=self.u_constraint)

        super(AttentionWithContext, self).build(input_shape)

    def compute_mask(self, input, input_mask=None):
        # do not pass the mask to the next layers
        return None

    def call(self, x, mask=None):
        uit = dot_product(x, self.W)

        if self.bias:
            uit += self.b

        uit = K.tanh(uit)
        ait = dot_product(uit, self.u)

        a = K.exp(ait)

        # apply mask after the exp. will be re-normalized next
        if mask is not None:
            # Cast the mask to floatX to avoid float64 upcasting in theano
            a *= K.cast(mask, K.floatx())

        # in some cases especially in the early stages of training the sum may be almost zero
        # and this results in NaN's. A workaround is to add a very small positive number Îµ to the sum.
        # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())
        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())

        a = K.expand_dims(a)
        weighted_input = x * a
        return K.sum(weighted_input, axis=1)

    def compute_output_shape(self, input_shape):
        return input_shape[0], input_shape[-1]

class MySentences(object):
    def __init__(self, dirname):
        self.dirname = dirname

    def __iter__(self):
        for fname in os.listdir(self.dirname):
            print(str(fname) + " is doing")
            for line in open(os.path.join(self.dirname, fname)):
                yield line.split()


def shuffleData(datas, labels, tokenflag=False):
    all_text_seq = []
    seq = []
    num = 1
    if (tokenflag):
        sentences = MySentences('data/')  # a memory-friendly iterator
        model = gensim.models.Word2Vec(sentences, min_count=0, size=50)
        model.save('myWord2VecModel.model')

    gensim_model = gensim.models.Word2Vec.load('myWord2VecModel.model')
    word2idx = {"_PAD": 0}

    vocab_list = [(k, gensim_model.wv[k]) for k, v in gensim_model.wv.vocab.items()]


    embeddings_matrix = np.zeros((len(gensim_model.wv.vocab.items()) + 1, gensim_model.vector_size))
    for i in range(len(vocab_list)):
        word = vocab_list[i][0]
        word2idx[word] = i + 1
        embeddings_matrix[i + 1] = vocab_list[i][1]
    vocab_list = list(gensim_model.wv.vocab.keys())
    word_index = {word: index for index, word in enumerate(vocab_list)}
    for line in datas:
        lineWords = line.split(" ")
        for index in range(len(lineWords)-1):
            if num < sequence_length:
                if lineWords[index] in word_index and lineWords[index]!=lineWords[index+1] :
                    seq.append(word_index[lineWords[index]])
                    num += 1
                else:
                    pass
        all_text_seq.append(seq)
        seq = []
        num =1
    print(all_text_seq)

    all_text_test = pad_sequences(all_text_seq, maxlen=sequence_length, padding='post')
    # print(all_text_test)
    np.random.seed(1226)
    del all_text_seq
    shuffle_indices = np.random.permutation(np.arange(len(labels)))
    x_shuffled = np.array(all_text_test)[shuffle_indices.astype(int)]
    y_shuffled = np.array(labels)[shuffle_indices.astype(int)]

    dev_sample_index = -1 * int(dev_sample_percentage * len(labels))
    train, val = x_shuffled[:dev_sample_index], x_shuffled[dev_sample_index:]
    train_labels, val_labels = y_shuffled[:dev_sample_index], y_shuffled[dev_sample_index:]
    del datas, labels, x_shuffled, y_shuffled, all_text_test
    with open("test_data.txt","w") as f:
        for line in val:
            f.write(line)
            f.write("\n")
    with open("test_label.txt","w") as f:
        for line in val_labels:
            f.write(line)
            f.write("\n")
    return train, val, train_labels, val_labels,embeddings_matrix



def lstm(embeddings_matrix):
    # embedding_matrix = gensim_model.wv.vectors
    model = Sequential()
    model.add(Masking(input_shape=(sequence_length,)))

    # model.add(Flatten())
    model.add(Embedding(
        input_dim=embeddings_matrix.shape[0],
        output_dim=embeddings_matrix.shape[1],
        input_length=sequence_length,
        weights=[embeddings_matrix],
        trainable=False))

    model.add(Bidirectional(GRU(128, kernel_regularizer=regularizers.l2(0.01), recurrent_regularizer=regularizers.l2(0.01),
                                 recurrent_dropout=0.3,return_sequences=False)))
    model.add(Dropout(0.25))
    # model.add(AttentionWithContext())
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.4))
    model.add(Dense(8))
    model.add(BatchNormalization())
    model.add(keras.layers.core.Activation('softmax'))
    model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
    return model


def main():
    datas = []
    labels = []
    for file in files:
        with open("data/"+file + ".txt", 'r') as f:
            for line in f.readlines():
                datas.append(line.strip("\n"))
                labels.append(classes[file])

    # print(len(datas[100]))
    shuffleData(datas,labels,tokenflag=False)
    train, val, train_labels, val_labels,embeddings_matrix = shuffleData(datas, labels, tokenflag=False)

    # train = train.reshape(len(train), sequence_length, 1)
    # val = val.reshape(len(val), sequence_length, 1)
    model = lstm(embeddings_matrix)
    early_stopping=EarlyStopping(monitor='val_loss',
                              patience=10, verbose=0, mode='auto')
    # reduce_lr = ReduceLROnPlateau(monitor='val_loss', patience=10, mode='auto')
    history = model.fit(train, train_labels, batch_size=1, epochs=num_step, shuffle=True,
                        validation_data=(val, val_labels),callbacks=[early_stopping])

    loss, acc = model.evaluate(val, val_labels, batch_size=batch_size)

    model.save("my2VecModelmodiall.h5")
    print("\nTest score: %.3f, accuracy: %.3f" % (loss, acc))
    with open("./log/alltest.log", "a+") as f:
        f.write("-----------------------------new start------------------------------")
        f.write("\nval_loss-----------------------\n")
        f.write(str(history.history['val_loss']))
        f.write("\nval_acc-----------------------\n")
        f.write(str(history.history['val_accuracy']))
        f.write("\nloss--------------------------\n")
        f.write(str(history.history['loss']))
        f.write("\nacc---------------------------\n")
        f.write(str(history.history['accuracy']))

        f.write("\nTest loss:" + str(round(loss, 3)) + ", accuracy:" + str(round(acc, 3)))
    model.summary()
    from keras.utils import plot_model
    plot_model(model, to_file='graphics_model.jpg')


if __name__ == '__main__':
    main()

