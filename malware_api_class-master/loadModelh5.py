from keras.models import load_model


import gensim

from keras.preprocessing.sequence import pad_sequences
from lime import lime_text
from lime.lime_text import LimeTextExplainer
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.preprocessing import FunctionTransformer

files = ["Spyware", "Downloader", "Trojan", "Worms", "Adware", "Dropper", "Virus", "Backdoor"]
classes = {"Spyware": 0, "Downloader": 1, "Trojan": 2, "Worms": 3, "Adware": 4, "Dropper": 5, "Virus": 6, "Backdoor": 7}

batch_size = 128
num_step = 1000
class_num = 8
sequence_length = 5000
embedding = 50
dev_sample_percentage = 0.2


def token(strings):
    gensim_model = gensim.models.Word2Vec.load('myWord2VecModel.model')
    print(len(gensim_model.wv.vocab))
    val = []
    for line in strings:
        val.append([gensim_model[word] for word in line.split(" ") if word in gensim_model])
    val = pad_sequences(val, maxlen=sequence_length, padding='post')
    #
    x_val = val.reshape(len(val), sequence_length, embedding)
    return x_val


def batch_pre(data):
    vecmodel = load_model('my2VecModeltest.h5')
    x_val = token(data)
    print(vecmodel["ldrloaddll"])
    return vecmodel.predict_proba(x_val)

def main():
    strings = ["address getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrgetprocedureaddress getsystemtimeasfiletime ldrloaddll getsystemtimeasfiletime ldrgetprocedureaddress setunhandledexceptionfilter ldrgetprocedureaddress ntallocatevirtualmemory ldrgetprocedureaddress ntcreatefile coinitializeex ntduplicateobject cocreateinstance",
               "ntqueryinformationfile ntclose ntopenfile ntqueryinformationfile ntopenfile ntclose ntopenfile ntquerydirectoryfile ntopenfile ntqueryinformationfile ntclose ntfreevirtualmemory ntclose ntallocatevirtualmemory ntopenfile ntquerydirectoryfile ntclose ntopenfile ntquerydirectoryfile ntclose ntquerydirectoryfile ntopenfile ntclose ntqueryinformationfile ntclose ntquerydirectoryfile ntopenfile ntclose ntopenfile ntquerydirectoryfile ntopenfile ntqueryinformationfile ntclose ntopenfile ntquerydirectoryfile ntclose ntopenfile ntquerydirectoryfile ntclose ntquerydirectoryfile ntopenfile ntclose ntqueryinformationfile ntclose ntquerydirectoryfile ntopenfile ntclose ntqueryinformationfile ntclose ntquerydirectoryfile ntopenfile ntclose ntqueryinformationfile ntclose ntopenfile ntquerydirectoryfile ntclose ntopenfile ntquerydirectoryfile ntclose ntquerydirectoryfile ntopenfile ntclose ntqueryinformationfile ntclose ntopenfile ntquerydirectoryfile ntclose ntopenfile ntquerydirectoryfile ntclose ntquerydirectoryfile"]

    prob = batch_pre(data=strings)
    print(prob)
    explainer = LimeTextExplainer(strings,class_names=files)
    exp = explainer.explain_instance(strings[0],
                                batch_pre,
                                num_features=5
                            )
    exp.as_list()

if __name__ == '__main__':
    main()