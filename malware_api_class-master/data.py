import os
import gensim
import numpy as np

files = {"Spyware", "Downloader", "Trojan", "Worms", "Adware", "Dropper", "Virus", "Backdoor"}
classes = {"Spyware": 0, "Downloader": 1, "Trojan": 2, "Worms": 3, "Adware": 4, "Dropper": 5, "Virus": 6, "Backdoor": 7}


class_num = 8
sequence_length = 5000

dev_sample_percentage = 0.2



class MySentences(object):
    def __init__(self, dirname):
        self.dirname = dirname

    def __iter__(self):
        for fname in os.listdir(self.dirname):
            print(str(fname) + " is doing")
            for line in open(os.path.join(self.dirname, fname)):
                yield line.split()


def shuffleData(datas, labels, tokenflag=False):
    all_text_seq = []
    seq = []
    num = 1
    if (tokenflag):
        sentences = MySentences('data/')  # a memory-friendly iterator
        model = gensim.models.Word2Vec(sentences, min_count=0, size=50)
        model.save('myWord2VecModel.model')

    gensim_model = gensim.models.Word2Vec.load('myWord2VecModel.model')
    word2idx = {"_PAD": 0}

    vocab_list = list(gensim_model.wv.vocab.keys())

    word_index = {word: index for index, word in enumerate(vocab_list)}
    for line in datas:
        lineWords = line.split(" ")
        for index in range(len(lineWords)-1):
            if num < sequence_length:
                if lineWords[index] in word_index and lineWords[index]!=lineWords[index+1] :
                    seq.append(line[index])
                    num += 1
                else:
                    pass
        all_text_seq.append(seq)
        seq = []
        num =1

    # all_text_test = pad_sequences(all_text_seq, maxlen=sequence_length, padding='post')
    np.random.seed(1226)

    shuffle_indices = np.random.permutation(np.arange(len(labels)))
    x_shuffled = np.array(all_text_seq)[shuffle_indices.astype(int)]
    y_shuffled = np.array(labels)[shuffle_indices.astype(int)]

    dev_sample_index = -1 * int(dev_sample_percentage * len(labels))
    train, val = x_shuffled[:dev_sample_index], x_shuffled[dev_sample_index:]
    train_labels, val_labels = y_shuffled[:dev_sample_index], y_shuffled[dev_sample_index:]
    print(val_labels)
    del datas, labels, x_shuffled, y_shuffled, all_text_seq
    with open("testString.txt","w+") as f:
        for line in val:
            f.write("".join(line))
            f.write("\n")






def main():
    datas = []
    labels = []
    for file in files:
        with open(file + "cut.txt", 'r') as f:
            for line in f.readlines():
                datas.append(line.strip("\n"))
                labels.append(classes[file])

    shuffleData(datas,labels,tokenflag=False)


if __name__ == '__main__':
    main()

